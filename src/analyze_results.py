import argparse
from pathlib import Path
import logging
import sys
import pandas as pd  # For specific pandas errors

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)

log = logging.getLogger(__name__)

# Attempt to import ResultsAnalyzer.
# This assumes 'analyzer.py' is in the same directory or src is in PYTHONPATH.
try:
    from analyzer import ResultsAnalyzer
except ImportError as e:
    # Logging might not be set up yet if this fails, so print to stderr as well
    sys.stderr.write(
        f"CRITICAL: Failed to import ResultsAnalyzer from analyzer.py. "
        f"Ensure analyzer.py is in the correct location and src is in PYTHONPATH. Error: {e}\n"
    )
    sys.exit(1)


def _parse_arguments() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description="Analyze benchmark summary CSV and generate plots.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        "-c",
        "--csv-file",
        type=Path,
        required=True,
        help="Path to the input summary.csv file generated by the benchmark.",
        metavar="CSV_FILE_PATH",
    )
    parser.add_argument(
        "-o",
        "--output-dir",
        type=Path,
        required=True,
        help="Directory where the generated plot images (e.g., PNGs) will be saved.",
        metavar="OUTPUT_DIRECTORY",
    )
    return parser.parse_args()


def _validate_and_prepare_paths(csv_path: Path, output_dir: Path):
    """
    Validates the input CSV path and creates the output directory if needed.

    Raises:
        SystemExit: If validation fails or directory creation fails.
    """
    log.info(f"Input CSV: {csv_path.resolve()}")
    log.info(f"Output directory for plots: {output_dir.resolve()}")

    if not csv_path.is_file():
        log.error(f"Input CSV file not found: {csv_path.resolve()}")
        sys.exit(1)

    try:
        output_dir.mkdir(parents=True, exist_ok=True)
        log.info(f"Ensured output directory exists: {output_dir.resolve()}")
    except OSError as e:
        log.error(
            f"Could not create or access output directory {output_dir.resolve()}: {e}"
        )
        sys.exit(1)
    except Exception as e:  # Catch any other unexpected error during path prep
        log.error(
            f"An unexpected error occurred while preparing the output directory {output_dir.resolve()}: {e}",
            exc_info=True,
        )
        sys.exit(1)


def _perform_analysis_and_plotting(analyzer: ResultsAnalyzer, output_dir: Path):
    """
    Uses the ResultsAnalyzer instance to generate plots and statistics.

    Args:
        analyzer: An initialized instance of ResultsAnalyzer.
        output_dir: The directory where plots should be saved.
    """
    log.info("Generating plot for Generation Time...")
    analyzer.plot_generation_time(output_dir=output_dir)

    log.info("Generating plot for Peak VRAM Usage...")
    analyzer.plot_peak_vram(output_dir=output_dir)

    log.info("Generating plot for Peak System RAM Usage...")
    analyzer.plot_peak_ram(output_dir=output_dir)

    # Example: Get and print some summary statistics (optional)
    try:
        gen_time_stats = analyzer.get_summary_statistics("generation_time_secs")
        if not gen_time_stats.empty:
            log.info(
                f"\nSummary Statistics for Generation Time (Completed Tests):\n{gen_time_stats.to_string()}"
            )
        else:
            log.info(
                "No data available to calculate summary statistics for generation time."
            )
    except ValueError as ve:
        log.warning(
            f"Could not generate summary statistics for generation time: {ve}"
        )


def main():
    args = _parse_arguments()

    try:
        _validate_and_prepare_paths(args.csv_file, args.output_dir)
        analyzer = ResultsAnalyzer(csv_path=args.csv_file)
        _perform_analysis_and_plotting(analyzer, args.output_dir)
        log.info(
            f"Analysis complete. Plots saved in {args.output_dir.resolve()}"
        )
        sys.exit(0)  # Success

    except FileNotFoundError as e:
        # Should be caught by _validate_and_prepare_paths or ResultsAnalyzer init
        log.error(f"File not found error during analysis: {e}")
        sys.exit(1)
    except (pd.errors.EmptyDataError, pd.errors.ParserError) as e:
        log.error(
            f"CSV data error: {e}. Please check the format and content of {args.csv_file.resolve()}."
        )
        sys.exit(1)
    except ValueError as e:
        # Catches ValueErrors from ResultsAnalyzer (e.g., missing columns, no data)
        # or from _perform_analysis_and_plotting if stats calculation fails in a way not caught internally.
        log.error(f"Data validation or processing error: {e}")
        sys.exit(1)
    except IOError as e:
        # Catches IOErrors from ResultsAnalyzer during plot saving
        log.error(f"File output error during plotting: {e}")
        sys.exit(1)
    except Exception as e:
        # Catch any other unexpected errors during the analysis process
        log.error(
            f"An unexpected error occurred during the analysis process: {e}",
            exc_info=True,  # Include traceback for unexpected errors
        )
        sys.exit(1)


if __name__ == "__main__":
    main()
