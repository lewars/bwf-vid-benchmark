# Taskfile.yml (using uv)
version: '3'

vars:
  VENV_DIR: .venv
  PYTHON_EXEC: '{{.VENV_DIR}}/bin/python3'
  REQ_FILE: requirements.txt
  SRC_DIR: src
  UNIT_TEST_DIR: tests
  TEST_CASES_YAML: test_cases/test_cases.yml

tasks:
  default:
    desc: Run the video generation benchmark (default task)
    deps: [run]
    cmds:
      - |
        echo "Run benchmark"

  venv:
    desc: Create virtual environment using uv
    cmds:
      - 'uv venv {{.VENV_DIR}}'
    status:
      - test -d {{.VENV_DIR}}

  lock:
    desc: Generate requirements.txt lock file from pyproject.toml using uv
    deps: [venv]
    cmds:
      - 'uv pip compile --extra dev pyproject.toml -o {{.REQ_FILE}}'
    status:
      - test -f {{.REQ_FILE}}

  setup:
    desc: Install dependencies from lock file using uv sync and install project editable
    deps: [venv, lock]
    cmds:
      - 'uv pip sync {{.REQ_FILE}}'
      - 'uv pip install -e ".[dev]"'
    status:
      - '{{.PYTHON_EXEC}} -c "import pytest; import bwf_vid_bench"'

  update:
    desc: Upgrade dependencies and regenerate lock file using uv
    deps: [venv]
    cmds:
      - 'uv pip compile --upgrade --extra dev --resolver=backtracking pyproject.toml -o {{.REQ_FILE}}'
      - echo "Lock file {{.REQ_FILE}} updated. Run 'task setup' to install."

  lint-py:
    desc: Lint Python source code and tests using flake8
    deps: [setup]
    cmds:
      - '{{.PYTHON_EXEC}} -m flake8 {{.SRC_DIR}} {{.UNIT_TEST_DIR}}'

  lint-yaml:
    desc: Lint YAML configuration files using yamllint
    deps: [setup]
    cmds:
      - '{{.PYTHON_EXEC}} -m yamllint {{.TEST_CASES_YAML}}'

  lint:
    desc: Run all code and configuration linters
    deps: [lint-py, lint-yaml]
    cmds:
      - echo "All linters passed."

  black:
    aliases: [black]
    desc: Format Python source code and tests using black
    deps: [setup]
    cmds:
      - '{{.PYTHON_EXEC}} -m black {{.SRC_DIR}} {{.UNIT_TEST_DIR}}'
      - '{{.PYTHON_EXEC}} -m isort {{.SRC_DIR}} {{.UNIT_TEST_DIR}}'

  test:
    desc: Run unit tests using pytest
    deps: [setup]
    cmds:
      - '{{.PYTHON_EXEC}} -m pytest'

  run:
    desc: Run the video generation benchmark
    aliases: [benchmark]
    deps: [setup]
    cmds:
      - '{{.PYTHON_EXEC}} {{.SRC_DIR}}/bench.py'

  analyze:
    desc: Analyze benchmark results and generate plots
    deps: [setup]
    cmds:
      - '{{.PYTHON_EXEC}} {{.SRC_DIR}}/analyze_results.py --csv-file results/summary.csv --output-dir results/plots'


  clean:
    desc: Remove virtual environment, cache files, build artifacts, and lock file
    cmds:
      - |
        echo "Cleaning project..."
        rm -rf {{.VENV_DIR}}
        # Keep standard cache cleaning
        find . -type f -name '*.py[co]' -delete -o -type d \
        -name __pycache__ -delete
        rm -rf .pytest_cache .coverage .mypy_cache build dist *.egg-info
        # Remove uv cache if desired (optional, can grow large but speeds up subsequent installs)
        # rm -rf ~/.cache/uv
        rm -f {{.REQ_FILE}} # Remove the lock file
        rm -f .pytest_reportlog.jsonl # Remove report log
        echo "Clean complete."
